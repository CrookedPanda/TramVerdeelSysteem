@model Model.ViewModels.CleaningMasterView
@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_LayoutMaintanance.cshtml";
}
<head>
    <meta charset="utf-8" />
    <title>Display a popup on click</title>
    <meta name="viewport" content="initial-scale=1,maximum-scale=1,user-scalable=no" />
    <script src="https://api.mapbox.com/mapbox-gl-js/v1.10.1/mapbox-gl.js"></script>
    <link href="https://api.mapbox.com/mapbox-gl-js/v1.10.1/mapbox-gl.css" rel="stylesheet" />
    <style>
        body {
            margin: 0;
            padding: 0;
            min-height: 100%
        }

        .pb-3 {
            height: 100%;
        }
        #mapbox {
            margin-top: 20px;
        }
        #map {
            position: absolute;
            margin-left: 25%;
            width: 70%;
            height: 60%;
        }
    </style>
</head>
<style>
    .mapboxgl-popup {
        max-width: 400px;
        font: 12px/20px 'Helvetica Neue', Arial, Helvetica, sans-serif;
    }
</style>




<div class="row">
    <div class="col-lg-3 col-md-6 col-sm-12 col-xs-12">
        <div class="list-group">
            <label class="list-group-item"><b>Trams:</b></label>
            @foreach (var train in Model.cleanings)
            {
                @if (train.TargetRail != 0)
                {

                }

                <input class="list-group-item text-left" type="button" onclick="ShowTram(@train.TargetNumber, @train.TargetRail, @train.TargetSector, @train.TargetIsLarge.ToString().ToLower())" value="@train.TargetNumber.ToString()" />
            }
        </div>
    </div>

    <div class="col-lg-9 col-md-6 col-sm-12 col-xs-12">
        <label><b>Tram Nummer:</b></label>
        <label id="TramNumber"></label>
        <br />

        <label><b>Spoor numer:</b></label>
        <label id="Spoor"></label>

        <br />
        <label><b>Sector nummer:</b></label>
        <label id="Sector"></label>
        <br />
        <label><b>grote/kleine schoonmaak:</b></label>
        <label id="IsLarge"></label>

        <br />
        <form class="col-12" asp-action="Index">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            @*<input asp-for="TargetAnnotation" type="text" id="tragetAnnotation" name="tragetAnnotation" value=""/>*@
            <input asp-for="cleaning.TargetNumber" type="hidden" id="targetNumber" name="targetNumber" value="" />
            <input asp-for="cleaning.TargetIsLarge" type="hidden" id="targetIsLarge" name="targetIsLarge" value="" />
            <input asp-for="cleaning.TargetRail" type="hidden" id="targetRail" name="targetRail" value="" />
            <input asp-for="cleaning.TargetSector" type="hidden" id="targetSector" name="targetSector" value="" />
            <input type="submit" class="btn btn-primary float-right" value="clean" />
        </form>
    </div>
</div>
<div id="mapbox">
    <div id="map"></div>
</div>
<div class="row">
    @*<form class="col-12" asp-action="Index">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input asp-for="TargetNumber" type="hidden"  id="targetNumber" name="targetNumber" value=""/>
            <input asp-for="TargetIsLarge" type="hidden" id="targetIsLarge"  name="targetIsLarge" value=""/>
            <input asp-for="TargetRail" type="hidden" id="targetRail"  name="targetRail" value=""/>
            <input asp-for="TargetSector" type="hidden" id="targetSector"  name="targetSector" value=""/>
            <input type="submit" class="btn btn-primary float-right" value="clean" />
        </form>*@
</div>



<script>
    mapboxgl.accessToken = 'pk.eyJ1Ijoic2FuZGVybiIsImEiOiJjam8xaXVubXQwYjV4M3BrdTF2eWViOXk1In0.KqdhiFgZrFqFaRwo6bZ_1g';
    var map = new mapboxgl.Map({
        container: 'map',
        style: 'mapbox://styles/mapbox/outdoors-v11',
        center: [4.852428, 52.347953],
        zoom: 17.5,
        bearing: -60,
        interactive: false
    });

    map.on('load', function () {
        map.addSource('places', {

            'type': 'geojson',
            'data': {
                'type': 'FeatureCollection',
                'features': [
        @foreach (var train in Model.cleanings)
        {
            @if (train.TargetRail >= 0)
            {
                <text>


                                {
                                    'type': 'Feature',
                                    'properties': {
                                        'description':
                                            '<strong>Tram nummer:</strong><br><strong>@train.TargetNumber</strong>',
                                        'icon': 'monument'
                                    },
                                    'geometry': {
                                        'type': 'Point',
                                        'coordinates': [4.852828, 52.347853]
                                    }
                                },


                </text>
            }
        }
                ]
            }
        });

        // Add a layer showing the places.
        map.addLayer({
            'id': 'places',
            'type': 'symbol',
            'source': 'places',
            'layout': {
                'icon-image': '{icon}-15',
                'icon-allow-overlap': true,
                'icon-size': 1.5
            }
        });

        // When a click event occurs on a feature in the places layer, open a popup at the
        // location of the feature, with description HTML from its properties.
        map.on('click', 'places', function (e) {
            var coordinates = e.features[0].geometry.coordinates.slice();
            var description = e.features[0].properties.description;

            // Ensure that if the map is zoomed out such that multiple
            // copies of the feature are visible, the popup appears
            // over the copy being pointed to.
            while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {
                coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;
            }

            new mapboxgl.Popup()
                .setLngLat(coordinates)
                .setHTML(description)
                .addTo(map);
        });

        // Change the cursor to a pointer when the mouse is over the places layer.
        map.on('mouseenter', 'places', function () {
            map.getCanvas().style.cursor = 'pointer';
        });

        // Change it back to a pointer when it leaves.
        map.on('mouseleave', 'places', function () {
            map.getCanvas().style.cursor = '';
        });

    });
</script>
<script type="text/javascript">
    function ShowTram(TramNumber, Rail, Sector, Islarge) {
        document.getElementById('TramNumber').innerText = TramNumber;
        document.getElementById('Spoor').innerText = Rail;
        document.getElementById('Sector').innerText = Sector;
        document.getElementById('IsLarge').innerText = Islarge;

        document.getElementById('targetNumber').value = TramNumber;
        document.getElementById('targetIsLarge').value = Islarge;
        document.getElementById('targetRail').value = Rail;
        document.getElementById('targetSector').value = Sector;

        //document.getElementById('tragetAnnotation').value = "";
    }
</script>
